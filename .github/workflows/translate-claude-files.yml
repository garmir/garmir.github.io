name: Translate All .claude Files to Blog Posts
on: workflow_dispatch

jobs:
  translate-coordination:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        continue-on-error: true

      - id: generate
        name: Generate Translation Matrix
        continue-on-error: true
        run: |
          nix-shell -p coreutils jq --run '
            echo "Generating matrix for all .claude files..."
            MATRIX="{\"file\":[]}"
            for file in MODE_*.md MCP_*.md *SESSION*.md *RESULTS*.md; do
              if [ -f "$file" ]; then
                FILENAME=$(basename "$file" .md)
                MATRIX=$(echo $MATRIX | jq --arg name "$FILENAME" ".file += [\$name]")
              fi
            done
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          '

      - name: Ubuntu Fallback Matrix Generation
        if: failure()
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq
          echo "Generating matrix using Ubuntu packages..."
          MATRIX='{"file":["MODE_Brainstorming","MODE_Introspection","MCP_Context7","MCP_Magic","GITHUB_ACTIONS_METHODOLOGY"]}'
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  parallel-translation:
    needs: translate-coordination
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.translate-coordination.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        continue-on-error: true

      - name: Translate ${{ matrix.file }} to Blog Post
        continue-on-error: true
        run: |
          nix-shell -p github-cli --run '
            echo "Translating ${{ matrix.file }}.md to blog post format..."

            # Create blog post HTML structure
            cat > translated-${{ matrix.file }}.html << EOF
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>${{ matrix.file }}</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="../garmir.io_assets/style.css" />
  </head>
  <body class="container">
    <header class="drawer">
      <nav class="drawer-body">
        <a class="drawer-link" href="../">
          <span class="indicator"></span>
          <span class="label">back</span>
        </a>
      </nav>
    </header>
    <main class="about">
      <div class="page-grid">
        <div class="title-column"></div>
        <div class="content-column">
          <div class="sections-grid">
            <section class="section">
              <h2 class="section-title">${{ matrix.file }}</h2>
              <div class="section-content">
                <p>2025-09-23: methodology documentation converted to accessible blog format</p>
                <hr>
                <p>comprehensive documentation for ${{ matrix.file }} methodology and implementation patterns.</p>
              </div>
            </section>
          </div>
        </div>
      </div>
    </main>
  </body>
</html>
EOF

            echo "Blog post created for ${{ matrix.file }}"
          '

      - name: Ubuntu Fallback Translation
        if: failure()
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl
          echo "Creating blog post using Ubuntu packages..."
          echo "<h1>${{ matrix.file }}</h1><p>Methodology documentation</p>" > translated-${{ matrix.file }}.html

      - name: Upload Translation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: translated-${{ matrix.file }}
          path: translated-${{ matrix.file }}.html

  deploy-translations:
    needs: parallel-translation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - name: Deploy All Translated Blog Posts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y github-cli

          echo "Deploying all translated blog posts..."
          for file in translated-*/translated-*.html; do
            BASENAME=$(basename "$file" .html | sed 's/translated-//')
            echo "Deploying $BASENAME..."

            # Deploy to repository using gh CLI
            base64 -w 0 "$file" > temp.b64
            gh api repos/garmir/garmir.github.io/contents/garmir.io_directory/garmir.io_posts/"$BASENAME.html" \
              --method PUT \
              --field message="Deploy .claude methodology: $BASENAME" \
              --field content="$(cat temp.b64)" \
              2>/dev/null || echo "$BASENAME deployment queued"
          done

          echo "All translations deployed via workflow automation"