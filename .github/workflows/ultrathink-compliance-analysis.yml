name: Ultrathink Compliance Analysis

on:
  workflow_dispatch:
    inputs:
      analysis_focus:
        description: 'Analysis focus area'
        required: false
        default: 'compliance-violations'
        type: choice
        options:
          - compliance-violations
          - architecture-review
          - security-assessment
          - performance-optimization

# Ultrathink Mode: Deep analysis with ~32K token budget
# Uses Sequential MCP + all available analysis tools
# Framework: SuperClaude v3.777
# Methodology: Deep reasoning with comprehensive tool integration

env:
  ANALYSIS_TIMEOUT: '900'  # 15 minutes for deep analysis

jobs:
  ultrathink-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ============================================
      # PHASE 1: ENVIRONMENT SETUP
      # ============================================

      - name: "[1/6] Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis

      - name: "[2/6] Install Nix"
        uses: DeterminateSystems/nix-installer-action@main
        with:
          logger: pretty

      - name: "[3/6] Setup Analysis Environment"
        run: |
          echo "=== Analysis Environment Setup ==="

          # Verify nix installation
          nix --version

          # Pre-cache analysis tools
          nix-shell -p nodejs expect ripgrep fd tree jq --run 'echo "Tools ready"'

          # Create analysis workspace
          mkdir -p /tmp/ultrathink-analysis
          cd /tmp/ultrathink-analysis

          echo "Environment ready for ultrathink analysis"

      # ============================================
      # PHASE 2: ULTRATHINK EXECUTION
      # ============================================

      - name: "[4/6] Execute Ultrathink Analysis"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "=== Launching Ultrathink Analysis ==="
          echo "Focus: ${{ github.event.inputs.analysis_focus }}"
          echo "Timeout: ${ANALYSIS_TIMEOUT}s"
          echo ""

          cd $GITHUB_WORKSPACE

          # Define analysis task based on input
          case "${{ github.event.inputs.analysis_focus }}" in
            "compliance-violations")
              TASK="Analyze SuperClaude Framework compliance violations using --ultrathink mode. Focus on: 1) Repository language classification (Python vs Nix mismatch), 2) Shell script cleanup status (7 deleted .sh files), 3) Untracked framework files (92 items including Qwen3/), 4) Git hygiene and separation of concerns. Provide comprehensive remediation strategy with priority levels."
              ;;
            "architecture-review")
              TASK="Perform comprehensive architecture review using --ultrathink mode. Analyze: 1) Nix configuration design (17 .nix files), 2) Module separation and dependencies, 3) MCP server integration patterns, 4) Agent orchestration architecture, 5) Performance optimization strategies. Identify architectural debt and improvement opportunities."
              ;;
            "security-assessment")
              TASK="Execute deep security assessment using --ultrathink mode. Review: 1) Exposed credentials in git config, 2) Penetration testing artifacts in repository, 3) API key handling patterns, 4) Permission bypass mechanisms (--dangerously-skip-permissions), 5) Network research tool security. Classify risks and provide mitigation strategies."
              ;;
            "performance-optimization")
              TASK="Analyze performance optimization opportunities using --ultrathink mode. Examine: 1) Nix evaluation performance (777 iterations claim), 2) Tool batching strategies, 3) Parallel execution patterns, 4) Space-time tradeoff implementations, 5) GitHub Actions scaling limits. Recommend concrete optimizations."
              ;;
          esac

          # Execute ultrathink with NPX spawning
          cd ~ && nix-shell -p nodejs expect ripgrep fd tree jq --run "expect -c \"
            set timeout ${ANALYSIS_TIMEOUT}

            log_user 1

            spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions \\\"\$TASK\\\"

            expect {
              -re {.*bypass permissions.*} {
                send \\\"2\\\r\\\"
                exp_continue
              }
              -re {.*Write.*|.*analysis.*|.*report.*|.*complete.*} {
                puts \\\"✅ Ultrathink analysis completed\\\"
                exit 0
              }
              timeout {
                puts \\\"⚠️  Analysis timeout after ${ANALYSIS_TIMEOUT}s\\\"
                exit 1
              }
              eof {
                puts \\\"✅ Analysis finished\\\"
                exit 0
              }
            }
          \""

          echo ""
          echo "=== Analysis Execution Complete ==="

      # ============================================
      # PHASE 3: ARTIFACT COLLECTION
      # ============================================

      - name: "[5/6] Collect Analysis Results"
        if: always()
        run: |
          echo "=== Collecting Analysis Artifacts ==="

          # Find generated reports
          find ~ -name "*analysis*" -o -name "*report*" -o -name "*ultrathink*" -type f -mmin -30 2>/dev/null | head -20

          # Collect Claude Code outputs
          if [ -d ~/claudedocs ]; then
            cp -r ~/claudedocs /tmp/ultrathink-analysis/ || true
          fi

          # Create summary
          cat > /tmp/ultrathink-analysis/execution-summary.txt << EOF
Ultrathink Analysis Execution Summary
====================================

Focus: ${{ github.event.inputs.analysis_focus }}
Workflow: ${{ github.workflow }}
Run ID: ${{ github.run_id }}
Repository: ${{ github.repository }}
Commit: ${{ github.sha }}
Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

Analysis Parameters:
- Mode: --ultrathink (32K token budget)
- Timeout: ${ANALYSIS_TIMEOUT}s
- MCP Servers: All enabled (Sequential, Context7, Magic, Morphllm, Playwright, Qwen3)
- Environment: ubuntu-latest with nix-shell

Results Location:
- Workspace: /tmp/ultrathink-analysis/
- Reports: See uploaded artifacts
EOF

          echo "Artifacts collected"

      - name: "[6/6] Upload Analysis Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ultrathink-analysis-${{ github.event.inputs.analysis_focus }}-${{ github.run_id }}
          path: |
            /tmp/ultrathink-analysis/
            ~/claudedocs/
          retention-days: 30

      # ============================================
      # COMPLETION SUMMARY
      # ============================================

      - name: "Analysis Complete"
        if: success()
        run: |
          echo ""
          echo "╔═══════════════════════════════════════════════════════╗"
          echo "║                                                       ║"
          echo "║  ✅ ULTRATHINK ANALYSIS COMPLETE                      ║"
          echo "║                                                       ║"
          echo "╚═══════════════════════════════════════════════════════╝"
          echo ""
          echo "Focus: ${{ github.event.inputs.analysis_focus }}"
          echo "Duration: Check workflow logs for timing"
          echo "Artifacts: Available in workflow run artifacts"
          echo ""
          echo "Download results:"
          echo "  gh run download ${{ github.run_id }} --name ultrathink-analysis-${{ github.event.inputs.analysis_focus }}-${{ github.run_id }}"
          echo ""
