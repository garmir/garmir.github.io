name: Ultrathink Compliance Analysis

on:
  # Auto-trigger on framework file changes
  push:
    branches:
      - main
    paths:
      - '.github/workflows/superclaude-ultrathink.yml'

  # Manual trigger (when GitHub cache refreshes)
  workflow_dispatch:
    inputs:
      analysis_focus:
        description: 'Analysis focus area'
        required: false
        default: 'compliance-violations'
        type: choice
        options:
          - compliance-violations
          - architecture-review
          - security-assessment
          - performance-optimization

# Ultrathink Mode: Deep analysis with ~32K token budget
# Uses Sequential MCP + all available analysis tools
# Framework: SuperClaude v3.777
# Methodology: Deep reasoning with comprehensive tool integration

env:
  ANALYSIS_TIMEOUT: '900'  # 15 minutes for deep analysis

jobs:
  ultrathink-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ============================================
      # PHASE 1: ENVIRONMENT SETUP
      # ============================================

      - name: "[1/6] Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis

      - name: "[2/6] Install Nix"
        uses: DeterminateSystems/nix-installer-action@main
        with:
          logger: pretty

      - name: "[3/6] Setup Analysis Environment"
        run: |
          echo "=== Analysis Environment Setup ==="

          # Verify nix installation
          nix --version

          # Pre-cache analysis tools
          nix-shell -p nodejs expect ripgrep fd tree jq --run 'echo "Tools ready"'

          # Create analysis workspace
          mkdir -p /tmp/ultrathink-analysis
          cd /tmp/ultrathink-analysis

          echo "Environment ready for ultrathink analysis"

      # ============================================
      # PHASE 2: ULTRATHINK EXECUTION
      # ============================================

      - name: "[4a/7] Create Analysis Prompt"
        run: |
          echo "=== Creating Analysis Prompt ==="

          cat > /tmp/analysis-prompt.txt << 'PROMPT_EOF'
          Analyze SuperClaude Framework compliance violations using --ultrathink mode.

          Focus areas:
          1. Repository language classification (Python vs Nix mismatch)
          2. Shell script cleanup status (deleted .sh files)
          3. Untracked framework files (Qwen3/, CORE files)
          4. Git hygiene and separation of concerns
          5. Repository identity (website vs framework)

          Provide comprehensive remediation strategy with priority levels and actionable steps.

          Use deep reasoning with Sequential MCP for systematic analysis.
          PROMPT_EOF

          echo "Prompt created successfully"

      - name: "[4b/7] Create Expect Automation Script"
        run: |
          echo "=== Creating Expect Script ==="

          cat > /tmp/ultrathink.exp << 'EXPECT_EOF'
          #!/usr/bin/env expect
          set timeout 900
          log_user 1

          set prompt [exec cat /tmp/analysis-prompt.txt]

          spawn npx @anthropic-ai/claude-code --dangerously-skip-permissions $prompt

          expect {
            -re {.*bypass permissions.*} {
              send "2\r"
              exp_continue
            }
            -re {.*Write.*|.*analysis.*|.*report.*|.*complete.*} {
              puts "\n=== Ultrathink analysis completed ==="
              exit 0
            }
            timeout {
              puts "\n=== Analysis timeout after 900s ==="
              exit 1
            }
            eof {
              puts "\n=== Analysis finished ==="
              exit 0
            }
          }
          EXPECT_EOF

          chmod +x /tmp/ultrathink.exp
          echo "Expect script created"

      - name: "[4c/7] Execute Ultrathink Analysis"
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "=== Launching Ultrathink Analysis ==="
          echo "Focus: ${{ github.event.inputs.analysis_focus }}"
          echo ""

          cd ~
          nix-shell -p nodejs expect --run 'expect /tmp/ultrathink.exp'

          echo ""
          echo "=== Analysis Execution Complete ==="

      # ============================================
      # PHASE 3: ARTIFACT COLLECTION
      # ============================================

      - name: "[5/7] Collect Analysis Results"
        if: always()
        run: |
          echo "=== Collecting Analysis Artifacts ==="

          # Find generated reports
          find ~ -name "*analysis*" -o -name "*report*" -o -name "*ultrathink*" -type f -mmin -30 2>/dev/null | head -20

          # Collect Claude Code outputs
          if [ -d ~/claudedocs ]; then
            cp -r ~/claudedocs /tmp/ultrathink-analysis/ || true
          fi

          # Create summary
          cat > /tmp/ultrathink-analysis/execution-summary.txt << EOF
Ultrathink Analysis Execution Summary
====================================

Focus: ${{ github.event.inputs.analysis_focus }}
Workflow: ${{ github.workflow }}
Run ID: ${{ github.run_id }}
Repository: ${{ github.repository }}
Commit: ${{ github.sha }}
Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

Analysis Parameters:
- Mode: --ultrathink (32K token budget)
- Timeout: ${ANALYSIS_TIMEOUT}s
- MCP Servers: All enabled (Sequential, Context7, Magic, Morphllm, Playwright, Qwen3)
- Environment: ubuntu-latest with nix-shell

Results Location:
- Workspace: /tmp/ultrathink-analysis/
- Reports: See uploaded artifacts
EOF

          echo "Artifacts collected"

      - name: "[6/7] Upload Analysis Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ultrathink-analysis-${{ github.event.inputs.analysis_focus }}-${{ github.run_id }}
          path: |
            /tmp/ultrathink-analysis/
            ~/claudedocs/
          retention-days: 30

      # ============================================
      # COMPLETION SUMMARY
      # ============================================

      - name: "[7/7] Analysis Complete"
        if: success()
        run: |
          echo ""
          echo "╔═══════════════════════════════════════════════════════╗"
          echo "║                                                       ║"
          echo "║  ✅ ULTRATHINK ANALYSIS COMPLETE                      ║"
          echo "║                                                       ║"
          echo "╚═══════════════════════════════════════════════════════╝"
          echo ""
          echo "Focus: ${{ github.event.inputs.analysis_focus }}"
          echo "Duration: Check workflow logs for timing"
          echo "Artifacts: Available in workflow run artifacts"
          echo ""
          echo "Download results:"
          echo "  gh run download ${{ github.run_id }} --name ultrathink-analysis-${{ github.event.inputs.analysis_focus }}-${{ github.run_id }}"
          echo ""
